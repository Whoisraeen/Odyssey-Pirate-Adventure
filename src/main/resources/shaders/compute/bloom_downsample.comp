#version 430

// Work group size
layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

// Input and output textures
layout(binding = 0, rgba16f) uniform readonly image2D inputTexture;
layout(binding = 1, rgba16f) uniform writeonly image2D outputTexture;

// Uniforms
uniform float threshold = 1.0;
uniform float knee = 0.1;
uniform vec2 texelSize;

// Karis average to prevent fireflies
vec3 karisAverage(vec3 color) {
    float brightness = dot(color, vec3(0.299, 0.587, 0.114));
    return color / (1.0 + brightness);
}

// Soft threshold function
vec3 softThreshold(vec3 color, float threshold, float knee) {
    float brightness = max(max(color.r, color.g), color.b);
    float softness = clamp((brightness - threshold + knee) / (2.0 * knee), 0.0, 1.0);
    softness = softness * softness * (3.0 - 2.0 * softness); // Smoothstep
    
    float contribution = max(softness, brightness - threshold);
    contribution /= max(brightness, 0.00001);
    
    return color * contribution;
}

void main() {
    ivec2 coord = ivec2(gl_GlobalInvocationID.xy);
    ivec2 outputSize = imageSize(outputTexture);
    
    if (coord.x >= outputSize.x || coord.y >= outputSize.y) {
        return;
    }
    
    // Sample 4 pixels from input texture (2x2 downsample)
    ivec2 inputCoord = coord * 2;
    
    vec3 color0 = imageLoad(inputTexture, inputCoord + ivec2(0, 0)).rgb;
    vec3 color1 = imageLoad(inputTexture, inputCoord + ivec2(1, 0)).rgb;
    vec3 color2 = imageLoad(inputTexture, inputCoord + ivec2(0, 1)).rgb;
    vec3 color3 = imageLoad(inputTexture, inputCoord + ivec2(1, 1)).rgb;
    
    // Apply Karis average to prevent fireflies
    color0 = karisAverage(color0);
    color1 = karisAverage(color1);
    color2 = karisAverage(color2);
    color3 = karisAverage(color3);
    
    // Average the colors
    vec3 avgColor = (color0 + color1 + color2 + color3) * 0.25;
    
    // Apply soft threshold for bloom
    vec3 bloomColor = softThreshold(avgColor, threshold, knee);
    
    // Write result
    imageStore(outputTexture, coord, vec4(bloomColor, 1.0));
}