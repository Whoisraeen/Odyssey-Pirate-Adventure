#version 430

// Work group size
layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

// Input and output textures
layout(binding = 0, rgba16f) uniform readonly image2D inputTexture;
layout(binding = 1, rgba16f) uniform writeonly image2D outputTexture;

// Uniforms
uniform float intensity = 1.0;
uniform vec2 texelSize;

void main() {
    ivec2 coord = ivec2(gl_GlobalInvocationID.xy);
    ivec2 outputSize = imageSize(outputTexture);
    
    if (coord.x >= outputSize.x || coord.y >= outputSize.y) {
        return;
    }
    
    // Convert to normalized coordinates for sampling
    vec2 uv = (vec2(coord) + 0.5) / vec2(outputSize);
    
    // Sample input texture with tent filter (9-tap)
    vec2 inputTexelSize = 1.0 / vec2(imageSize(inputTexture));
    
    vec3 color = vec3(0.0);
    
    // Center sample (weight: 4/16)
    color += imageLoad(inputTexture, ivec2(uv / inputTexelSize)).rgb * (4.0/16.0);
    
    // Edge samples (weight: 2/16 each)
    color += imageLoad(inputTexture, ivec2((uv + vec2(-inputTexelSize.x, 0.0)) / inputTexelSize)).rgb * (2.0/16.0);
    color += imageLoad(inputTexture, ivec2((uv + vec2(inputTexelSize.x, 0.0)) / inputTexelSize)).rgb * (2.0/16.0);
    color += imageLoad(inputTexture, ivec2((uv + vec2(0.0, -inputTexelSize.y)) / inputTexelSize)).rgb * (2.0/16.0);
    color += imageLoad(inputTexture, ivec2((uv + vec2(0.0, inputTexelSize.y)) / inputTexelSize)).rgb * (2.0/16.0);
    
    // Corner samples (weight: 1/16 each)
    color += imageLoad(inputTexture, ivec2((uv + vec2(-inputTexelSize.x, -inputTexelSize.y)) / inputTexelSize)).rgb * (1.0/16.0);
    color += imageLoad(inputTexture, ivec2((uv + vec2(inputTexelSize.x, -inputTexelSize.y)) / inputTexelSize)).rgb * (1.0/16.0);
    color += imageLoad(inputTexture, ivec2((uv + vec2(-inputTexelSize.x, inputTexelSize.y)) / inputTexelSize)).rgb * (1.0/16.0);
    color += imageLoad(inputTexture, ivec2((uv + vec2(inputTexelSize.x, inputTexelSize.y)) / inputTexelSize)).rgb * (1.0/16.0);
    
    // Apply intensity and write result
    imageStore(outputTexture, coord, vec4(color * intensity, 1.0));
}